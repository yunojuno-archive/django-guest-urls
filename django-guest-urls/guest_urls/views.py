# -*- coding: utf-8 -*-
"""guest_url views.

There is only a single guest_url view, and that is the view function that
processes the incoming url. It resolves the url to the relevant view function,
calls that function and returns the response - NB without redirecting.

* get_guest_url

"""
import logging

from django.http import HttpResponseForbidden, HttpResponseGone
from django.shortcuts import get_object_or_404
from django.views.decorators.http import require_GET

from guest_urls.models import GuestUrl, GuestUrlInvalid, GuestUrlExpired

logger = logging.getLogger(__name__)


@require_GET
def get_guest_url(request, link_uuid):
    """Process the incoming guest url GET.

    The link_uuid is used to look up the link URL, which is resolved back
    into the relevant view (function, args, kwargs) and then called, passing
    in the current request object.

    Once the response has been generated by the link view function, the guest
    URL is marked as having been used - a new GuestUrlUsage instance is
    created, the usage counter is incremented.

    If the link is invalid (expired, used already, etc.) then the view function
    is not called, but an appropriate HTTP status is returned:

    * Link cannot be found - 404
    * Link has already been used - 403 Forbidden
    * Link has expired - 410 Gone

    NB even if an error occurs, a GuestUrlUsage instance is generated - as
    we want to monitor / capture bad requests along with the good ones.

    Args:
        request: the incoming HttpRequest instance from Django
        link_uuid: the unique id of the link, as generated by the guest_url
            template tag.

    Returns the HttpResponse returned by the associated view function.

    """
    guest_url = get_object_or_404(GuestUrl, uuid=link_uuid)
    try:
        logger.debug(u"Processing guest url: %r", guest_url)
        return guest_url.process_request(request)
    except GuestUrlExpired:
        return HttpResponseGone()
    except GuestUrlInvalid:
        return HttpResponseForbidden()
